Send Message
- Action 생성 후 메소드 앞에 On을 붙여서 작성
- Event 발생 시, On + Action 메소드에서 InputValue를 통해 값 전달

Invoke Unity Events
- Button과 유사한 방식으로 사용
- 오브젝트의 메소드를 Action Events에 할당
- Event 발생 시, CallbackContext를 통해 할당한 메소드로 값 전달


이후 두 방식 모두 전달받은 값을 이용하여 로직 구현

--------------------------------------------------------------------------------------------------------------
CharacterManager와 Player의 역할

주관적인 견해로는 MMORPG 또는 RPG 장르의 게임에서 여러 유저들과 플레이하는 경우를 생각해보자.
이 때, Manager의 경우에는 매칭된 게임에 대해서 싱글턴으로 입장한 유저들을 관리하는 경우라고 생각한다.
그리고 Player는 개개인의 Player 오브젝트들의 움직임 및 상호작용과 관련된 기능을 한다고 생각한다.

Manager의 경우 UI, Audio, Background 등 각각의 기능에 맞는 스크립트를 생성하여 여러 오브젝트를 관리한다.
마찬가지로 각각의 기능에 포함되는 오브젝트들은 Player처럼 자신만의 기능을 구현하는 스크립트가 있을 것이다.

--------------------------------------------------------------------------------------------------------------
Move, CameraLook, IsGrounded 로직 분석

Move
움직임 이벤트 발생 시, OnMove 메소드로부터 값을 전달받아 오브젝트 움직임의 물리 연산한다.
전달받은 값은 Vector2로 x와 y값이 있으며, x는 좌우 그리고 y는 상하의 움직임 값을 가지고 있다.
그렇기 때문에 3d 게임에서는 Vector3를 이용하여 forward에는 y값, right에는 x값을 더해준다.

CameraLook
마우스 이벤트 발생 시, 카메라를 회전해주는 기능을 한다.
움직임과는 달리 카메라의 각도를 변경하기 때문에 Rotate 값을 건드려준다.
마우스가 좌우로 움직이면 x값이 변경됨에 따라 좌우로 회전을 주어야하기 때문에 y축 값을 변경해준다.
마찬가지로 상하로 움직일 경우에는 x축 값을 변경해주면 정상적으로 작동한다.

IsGrounded
Ray는 직선을 씬에 투영하여 대상에 적중시에 true를 리턴하는 물리 함수이다.
플레이어의 위치에서 네 방향에서 아래쪽으로 Ray를 사용하며, Raycast로 플레이어와 바닥의 충돌을 감지한다.
충돌 여부에 따라서 점프 가능 여부를 반환해주는 역할을 한다.
